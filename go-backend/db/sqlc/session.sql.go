// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_id, refresh_token, is_blocked, user_agent, user_ip, expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, refresh_token, is_blocked, user_agent, user_ip, expires_at, created_at
`

type CreateSessionParams struct {
	UserID       int64     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	IsBlocked    bool      `json:"is_blocked"`
	UserAgent    string    `json:"user_agent"`
	UserIp       string    `json:"user_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.RefreshToken,
		arg.IsBlocked,
		arg.UserAgent,
		arg.UserIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.UserAgent,
		&i.UserIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token, is_blocked, user_agent, user_ip, expires_at, created_at FROM sessions
WHERE user_id = $1 LIMIT ONE
`

func (q *Queries) GetSession(ctx context.Context, userID int64) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.UserAgent,
		&i.UserIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
