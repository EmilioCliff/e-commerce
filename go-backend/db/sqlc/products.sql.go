// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package db

import (
	"context"
)

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, product_name, description, price, quantity, discount, rating, size_options, color_options, category, brand, image_url, created_at, updated_at FROM products
ORDER BY product_name
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.Discount,
			&i.Rating,
			&i.SizeOptions,
			&i.ColorOptions,
			&i.Category,
			&i.Brand,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByCategory = `-- name: GetProductByCategory :many
SELECT id, product_name, description, price, quantity, discount, rating, size_options, color_options, category, brand, image_url, created_at, updated_at FROM products
WHERE category = $1
`

func (q *Queries) GetProductByCategory(ctx context.Context, category string) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.Discount,
			&i.Rating,
			&i.SizeOptions,
			&i.ColorOptions,
			&i.Category,
			&i.Brand,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByUpdatedTime = `-- name: GetProductByUpdatedTime :many
SELECT id, product_name, description, price, quantity, discount, rating, size_options, color_options, category, brand, image_url, created_at, updated_at FROM products
ORDER BY updated_at DESC
`

func (q *Queries) GetProductByUpdatedTime(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductByUpdatedTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.Discount,
			&i.Rating,
			&i.SizeOptions,
			&i.ColorOptions,
			&i.Category,
			&i.Brand,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
