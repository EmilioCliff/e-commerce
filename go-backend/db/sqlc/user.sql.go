// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email, password, subscription, user_cart, role
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, username, email, password, subscription, user_cart, role, created_at, updated_at
`

type CreateUserParams struct {
	Username     string  `json:"username"`
	Email        string  `json:"email"`
	Password     string  `json:"password"`
	Subscription bool    `json:"subscription"`
	UserCart     []int64 `json:"user_cart"`
	Role         string  `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Subscription,
		arg.UserCart,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getSubscribedUsers = `-- name: GetSubscribedUsers :many
SELECT id, username, email, password, subscription, user_cart, role, created_at, updated_at FROM users
WHERE
    subscription = true
ORDER BY username
`

func (q *Queries) GetSubscribedUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getSubscribedUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Subscription,
			&i.UserCart,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, subscription, user_cart, role, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, subscription, user_cart, role, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, username, email, password, subscription, user_cart, role, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, subscription, user_cart, role, created_at, updated_at FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Subscription,
			&i.UserCart,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
    set username = $1,
    email = $2,
    password = $3,
    subscription = $4,
    user_cart = $5,
    updated_at = $6
WHERE id = $7
RETURNING id, username, email, password, subscription, user_cart, role, created_at, updated_at
`

type UpdateUserParams struct {
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	Password     string    `json:"password"`
	Subscription bool      `json:"subscription"`
	UserCart     []int64   `json:"user_cart"`
	UpdatedAt    time.Time `json:"updated_at"`
	ID           int64     `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Subscription,
		arg.UserCart,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserCart = `-- name: UpdateUserCart :one
UPDATE users
    set user_cart = $1
WHERE id = $2
RETURNING id, username, email, password, subscription, user_cart, role, created_at, updated_at
`

type UpdateUserCartParams struct {
	UserCart []int64 `json:"user_cart"`
	ID       int64   `json:"id"`
}

func (q *Queries) UpdateUserCart(ctx context.Context, arg UpdateUserCartParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserCart, arg.UserCart, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserCredentials = `-- name: UpdateUserCredentials :one
UPDATE users
    set username = $1,
    password = $2,
    role = $3,
    updated_at = $4
WHERE id = $4
RETURNING id, username, email, password, subscription, user_cart, role, created_at, updated_at
`

type UpdateUserCredentialsParams struct {
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	Role      string    `json:"role"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserCredentials(ctx context.Context, arg UpdateUserCredentialsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserCredentials,
		arg.Username,
		arg.Password,
		arg.Role,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserSubscription = `-- name: UpdateUserSubscription :one
UPDATE users
    set subscription = $1,
    updated_at = $3
WHERE id = $2
RETURNING id, username, email, password, subscription, user_cart, role, created_at, updated_at
`

type UpdateUserSubscriptionParams struct {
	Subscription bool      `json:"subscription"`
	ID           int64     `json:"id"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserSubscription(ctx context.Context, arg UpdateUserSubscriptionParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserSubscription, arg.Subscription, arg.ID, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.UserCart,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
