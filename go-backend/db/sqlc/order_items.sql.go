// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order_items.sql

package db

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    order_id, product_id, color, size, quantity
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, order_id, product_id, color, size, quantity
`

type CreateOrderItemParams struct {
	OrderID   int64   `json:"order_id"`
	ProductID int64   `json:"product_id"`
	Color     *string `json:"color"`
	Size      *string `json:"size"`
	Quantity  int32   `json:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Color,
		arg.Size,
		arg.Quantity,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Color,
		&i.Size,
		&i.Quantity,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrderItem, id)
	return err
}

const getOrderOrderItems = `-- name: GetOrderOrderItems :many
SELECT id, order_id, product_id, color, size, quantity FROM order_items
WHERE order_id = $1
`

func (q *Queries) GetOrderOrderItems(ctx context.Context, orderID int64) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Color,
			&i.Size,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, order_id, product_id, color, size, quantity FROM order_items
WHERE id = $1
`

func (q *Queries) ListOrderItems(ctx context.Context, id int64) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Color,
			&i.Size,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItems = `-- name: UpdateOrderItems :one
UPDATE order_items
    set color = $1,
    size = $2,
    quantity = $3
WHERE id = $4
RETURNING id, order_id, product_id, color, size, quantity
`

type UpdateOrderItemsParams struct {
	Color    *string `json:"color"`
	Size     *string `json:"size"`
	Quantity int32   `json:"quantity"`
	ID       int64   `json:"id"`
}

func (q *Queries) UpdateOrderItems(ctx context.Context, arg UpdateOrderItemsParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, updateOrderItems,
		arg.Color,
		arg.Size,
		arg.Quantity,
		arg.ID,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Color,
		&i.Size,
		&i.Quantity,
	)
	return i, err
}
